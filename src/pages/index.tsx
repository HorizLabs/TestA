import Head from "next/head";
import styles from "@/styles/Home.module.css";
import type { InferGetServerSidePropsType, GetServerSideProps } from "next";
import { db } from "@/db/db";
import { account } from "@/db/schema";
import { eq } from "drizzle-orm";
import Image from "next/image";
import { FormEvent, useState } from "react";
import { Loader } from "@mantine/core";

export const getServerSideProps = (async (args: any) => {  
  if (typeof args.req.cookies['token'] != 'undefined') {
    return {
      props: {accountLoginStatus: true}
    }
  }
  // Get account information to determine if there is an owner account.
  let account_information = await db.select().from(account)
  return {
    // Ternary operator for that determination
    props: {accountCreationStatus: (account_information.length != 0 ? true : false)}
  }
})

export default function Home(props: InferGetServerSidePropsType<typeof getServerSideProps>) {
  // Flags
  let [errorInfo, setErrorInfo] = useState<string>('')
  let [buttonStatus, setButtonStatus] = useState<boolean>(false)
  if (props.accountLoginStatus) {
    // redirect to dashboard
    return (
      <>
        <Head>
          <meta httpEquiv="refresh" content="0;url=/dashboard" />
        </Head>
      </>
    )
  }
  // Function to handle creation of owner account
  async function accountSystem(event: FormEvent<HTMLFormElement>) {
    event.preventDefault()
    setButtonStatus(true)
    const formData = new FormData(event.currentTarget)
    const response = await fetch('/api/account', {
      method: 'POST',
      body: JSON.stringify(Object.fromEntries(formData.entries())),
    })

    const data = await response.json()
    if (data.coreStatus === 'RESPONSE_SUCCESS') {
      window.location.href = '/dashboard'
    } else {
      setErrorInfo(data.message)
      setButtonStatus(false)
    }
  }

  return (
    <>
      <Head>
        <title>Horizon Labs</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.index}>
        <div className={styles.login_background}>
        </div>
        <div className={styles.login_form}>
          <div className={styles.login_form_header}>
            <Image src="/logo.png" alt="Horizon Labs Logo" width={50} height={50} />
            <h2>{props.accountCreationStatus ? 'Login to Horizon Labs.' : 'Create your Horizon Labs Account.'}</h2>
          </div>
          <form className={styles.account_form} onSubmit={accountSystem}>
            {errorInfo != '' ? <p className={styles.information_error}>{errorInfo}</p>: null}
            {!props.accountCreationStatus ? <input type="text" name="name" placeholder="Name" required/>: null}
            <input type="email" name="email" placeholder="Email" required/>
            <input type="password" name="password" placeholder="Password" required/>
            {buttonStatus ? <button><Loader color="black" style={{transform: 'scale(0.7)'}} /></button>: <button type="submit">{props.accountCreationStatus ? 'Login' : 'Create Account'}</button>}
          </form>
        </div>
      </main>
    </>
  );
}
